#!/bin/bash

#set -x

#
# TODO: Port this to Python, because bash is bad and dangerous and it turns out
# that my error handling in bash is garbage.
#

#
# TODO: Support building with a project `static` directory. This will avoid
# issues having to symlink the source directory into the build environment.
#


#
# make-doc - Simple builder for madoko or latex documents.
#
# A wrapper around madoko + tectonic in order to compile madoko files into pdf
# files via tectonic. This is necessary because madoko has only limited support
# for custom latex-processing commands.
#
# Author: Noah D. Ortiz <ndortiz@caltech.edu>
#

_BUILD_PATH=./build
_TARGET_PATH=./bin


function fail()
{
    echo "Fatal error: ${1}" >&2
    print_usage >&2
    exit 1
}

function print_usage()
{
    cat <<EOF
usage: $0 [<options>] -t <type> <input>

Process <input> into a pdf document, placing the output in '${_TARGET_PATH}' and
build material in '${_BUILD_PATH}'.

Where <input> is either a madoko or (la)tex file and <type> is either 'mdk' or
'tex' indicating the filetype of <input>.

Options:
    --help|-h
        Print this usage and exit.
    --preview
        Open the resulting pdf document if it has not already been opened.
    --localtex <path>
        Build the tex document in the presence of files found in <path>. This
        means that no file in <path> should have the same name as <input>.
        NOTE: This is kind of a hack to get tectonic to work with external
        packages. At the moment, the only ways to use external packages with
        tectonic is either to create a tectonic bundle or to place the files in
        the same directory as the input.
EOF
}

function count_open()
{
    [ ${#} -eq 1 ] || fail "Wrong number of arguments."
    local path=${1}

    echo $(pgrep -cf "${path}")
}

function preview()
{
    [ ${#} -eq 1 ] || fail "Wrong number of arguments."
    local path=${1}

    local q="xdg-open[ ]${path}"
    if [ $(count_open "${q}") -eq 0 ]
    then
        xdg-open "${path}" 1>&2 &
    fi
}

# Create (absolute) symlink to $1 in directory $2.
# Return 1 if not a directory.
# Echo path to resulting link.
function add_link()
{
    [ ${#} -eq 3 ] || fail "Wrong number of arguments."
    local source_path="${1}"
    local target_dir="${2}"
    local ln_flag="${3}"

    if !([[ "${ln_flag}" == "-f" ]] || [[ "${ln_flag}" == "-i" ]])
    then
        ln_flag=""
    fi

    [ -d "${target_dir}" ] || return 1

    ln -s -t "${target_dir}" $(readlink -f "${source_path}") "${ln_flag}" 1>&2

    local bn=$(basename "${source_path}")
    echo "${target_dir}/${bn}"
}

# Echo (relative) path to resulting tex.
function mdk_to_tex()
{
    [ ${#} -eq 2 ] || fail "Wrong number of arguments."
    local input_path=${1}
    local target_path=${2}

    madoko --odir="${target_path}" --tex "${input_path}" 1>&2

    local bn=$(basename --suffix=".mdk" "${input_path}")
    echo "${target_path}/${bn}.tex"
}

# Echo path to resulting pdf.
function tex_to_pdf()
{
    [ ${#} -ge 3 ] || fail "Wrong number of arguments."
    local input_path="${1}"
    local build_path="${2}"
    local target_path="${3}"
    # Optional.
    local localtex_path="${4}"

    local tex_build_path="${build_path}/tex"
    mkdir -p "${tex_build_path}"
    local tex_path=$(\
        build_tex_env "${input_path}" "${tex_build_path}" "${localtex_path}"\
    )
    tectonic --outdir "${target_path}" "${tex_path}" 1>&2

    local bn=$(basename --suffix=".tex" "${input_path}")
    echo "${target_path}/${bn}.pdf"
}

# Echo (relative) path to tex file in the build path.
function build_tex_env()
{
    [ ${#} -ge 2 ] || fail "Wrong number of arguments."
    local input_path="${1}"
    local build_path="${2}"
    # Optional.
    local localtex_path="${3}"

    if [ ! -z "${localtex_path}" ]
    then
        for f in ${localtex_path}/*
        do
            [ -e "${f}" ] || continue
            add_link "${f}" "${build_path}" -f  1>&2 || return 1
        done
    fi

    local input_dir=$(dirname "${input_path}")
    if [ ! -z "${input_dir}" ]
    then
        for f in ${input_dir}/*
        do
            [ -e "${f}" ] || continue
            add_link "${f}" "${build_path}" -f  1>&2 || return 1
        done
    fi

    echo $(add_link "${input_path}" "${build_path}" -f)
}

# DEPRECATED
function build_localtex()
{
    local localtex_path=${1}
    local build_path=${2}

    # Do nothing if no localtex to process.
    [ -z ${localtex_path} ] && return
    
    local target_path="${build_path}/.localtex"

    # Don't symlink if localtex already exists.
    if [ ! -e "${target_path}" ]; then
        ln -s $(readlink -f "${localtex_path}") "${target_path}" 1>&2
    fi
}


#
# Main
#

# Default options.
preview=false

# Parse args.
while [ "${#}" -gt 0 ]; do
    case "${1}" in
        --help|-h)
            print_usage
            exit
            ;;
        --preview)
            preview=true
            shift
            ;;
        --localtex)
            shift
            localtex=${1}
            shift
            ;;
        -t)
            shift
            ftype=${1}
            shift
            ;;
        --)
            shift
            ;;
        *)
            input=${1}
            shift
            ;;
    esac
done

# Make directories.
mkdir -p "${_BUILD_PATH}"
mkdir -p "${_TARGET_PATH}"

# Dispatch based on type.
case ${ftype} in
    tex)
        pdf_path=$(\
            tex_to_pdf ${input} ${_BUILD_PATH} ${_TARGET_PATH} ${localtex}\
        )
        ;;
    mdk)
        tex_path=$(mdk_to_tex ${input} ${_BUILD_PATH})
        pdf_path=$(\
            tex_to_pdf ${tex_path} ${_BUILD_PATH} ${_TARGET_PATH} ${localtex}\
        )
        ;;
    *)
        fail "Unrecognized type."
        ;;
esac

# Preview.
if [[ "${preview}" == "true" ]]
then
    preview ${pdf_path}
fi
